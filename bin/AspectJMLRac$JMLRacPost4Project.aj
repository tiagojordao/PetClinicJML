import org.aspectjml.ajmlrac.runtime.*;
public privileged aspect AspectJMLRac$JMLRacPost4Project {

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final petclinic.Appointment object$rac): (execution( * petclinic.Appointment..*+.*(..))
          || execution(petclinic.Appointment..*+.new(..))
          || execution( * petclinic.Appointment+.*(..))
          || execution(petclinic.Appointment+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * petclinic.Appointment..*+.*(..))
          || execution(petclinic.Appointment..*+.new(..))
          || execution( * petclinic.Appointment+.*(..))
          || execution(petclinic.Appointment+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Appointment$9d763723_30db_4822_bba6_852d9d066e53{
  before(): (execution( * petclinic.Appointment..*+.*(..))
          || execution(petclinic.Appointment..*+.new(..))
          || execution( * petclinic.Appointment+.*(..))
          || execution(petclinic.Appointment+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final petclinic.AppointmentController object$rac): (execution( * petclinic.AppointmentController..*+.*(..))
          || execution(petclinic.AppointmentController..*+.new(..))
          || execution( * petclinic.AppointmentController+.*(..))
          || execution(petclinic.AppointmentController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * petclinic.AppointmentController..*+.*(..))
          || execution(petclinic.AppointmentController..*+.new(..))
          || execution( * petclinic.AppointmentController+.*(..))
          || execution(petclinic.AppointmentController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_AppointmentController$ebeeb024_2ff9_4d1c_ba42_bf01651929a5{
  before(): (execution( * petclinic.AppointmentController..*+.*(..))
          || execution(petclinic.AppointmentController..*+.new(..))
          || execution( * petclinic.AppointmentController+.*(..))
          || execution(petclinic.AppointmentController+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final petclinic.Pet object$rac): (execution( * petclinic.Pet..*+.*(..))
          || execution(petclinic.Pet..*+.new(..))
          || execution( * petclinic.Pet+.*(..))
          || execution(petclinic.Pet+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * petclinic.Pet..*+.*(..))
          || execution(petclinic.Pet..*+.new(..))
          || execution( * petclinic.Pet+.*(..))
          || execution(petclinic.Pet+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Pet$8b8527a2_b7f7_4540_804d_84381969ee51{
  before(): (execution( * petclinic.Pet..*+.*(..))
          || execution(petclinic.Pet..*+.new(..))
          || execution( * petclinic.Pet+.*(..))
          || execution(petclinic.Pet+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final petclinic.PetClinic object$rac): (execution( * petclinic.PetClinic..*+.*(..))
          || execution(petclinic.PetClinic..*+.new(..))
          || execution( * petclinic.PetClinic+.*(..))
          || execution(petclinic.PetClinic+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * petclinic.PetClinic..*+.*(..))
          || execution(petclinic.PetClinic..*+.new(..))
          || execution( * petclinic.PetClinic+.*(..))
          || execution(petclinic.PetClinic+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final petclinic.PetController object$rac): (execution( * petclinic.PetController..*+.*(..))
          || execution(petclinic.PetController..*+.new(..))
          || execution( * petclinic.PetController+.*(..))
          || execution(petclinic.PetController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * petclinic.PetController..*+.*(..))
          || execution(petclinic.PetController..*+.new(..))
          || execution( * petclinic.PetController+.*(..))
          || execution(petclinic.PetController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final petclinic.Vet object$rac): (execution( * petclinic.Vet..*+.*(..))
          || execution(petclinic.Vet..*+.new(..))
          || execution( * petclinic.Vet+.*(..))
          || execution(petclinic.Vet+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * petclinic.Vet..*+.*(..))
          || execution(petclinic.Vet..*+.new(..))
          || execution( * petclinic.Vet+.*(..))
          || execution(petclinic.Vet+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

public static aspect UtilPreconditionChecking_Vet$ec2b9ab0_38de_450b_b3f5_4226b40d555e{
  before(): (execution( * petclinic.Vet..*+.*(..))
          || execution(petclinic.Vet..*+.new(..))
          || execution( * petclinic.Vet+.*(..))
          || execution(petclinic.Vet+.new(..))){
    JMLChecker.hasAnyThrownPrecondition();
  }
}

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final petclinic.VetController object$rac): (execution( * petclinic.VetController..*+.*(..))
          || execution(petclinic.VetController..*+.new(..))
          || execution( * petclinic.VetController+.*(..))
          || execution(petclinic.VetController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * petclinic.VetController..*+.*(..))
          || execution(petclinic.VetController..*+.new(..))
          || execution( * petclinic.VetController+.*(..))
          || execution(petclinic.VetController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

}